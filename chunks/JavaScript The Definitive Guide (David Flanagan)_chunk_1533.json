{
  "id": "JavaScript The Definitive Guide (David Flanagan)_chunk_1533",
  "content": "i = 0; i < 10; i++) console.log(f.next());\nObserve que a função geradora fibonacci() nunca retorna. Por isso, o gerador que ela retorna nunca \nvai lançar StopIteration. Em vez de usá-lo como um objeto iterável em um laço for/in e fazer laço \npara sempre, o utilizamos como um iterador e chamamos seu método next() dez vezes, explicita-\nmente. Depois que o código anterior é executado, o gerador \nf ainda mantém o estado de execução \nda função geradora. Se não vamos mais utilizá-lo, podemos liberar esse estado, chamando o método \nclose() de f:\nf.close();\nQuando o método close de um gerador é",
  "metadata": {
    "source": "/home/jonata/Documentos/typescript-langchain/tmp/JavaScript The Definitive Guide (David Flanagan).pdf",
    "chunkIndex": 1533,
    "totalChunks": 10000
  }
}