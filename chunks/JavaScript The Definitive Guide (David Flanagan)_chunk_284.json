{
  "id": "JavaScript The Definitive Guide (David Flanagan)_chunk_284",
  "content": "s exceções são \nnull e undefined: qualquer tentativa de usar esses valores onde é esperado um objeto \ndispara um TypeError, em vez de realizar uma conversão.\nAs conversões de objeto para valor primitivo são um pouco mais complicadas e são o tema da Seção \n3.8.3.\n3.8.1   Conversões e igualdade\nComo JavaScript pode converter valores com flexibilidade, seu operador de igualdade == também \né flexível em sua noção de igualdade. Todas as comparações a seguir são verdadeiras, por exemplo:\nnull == undefined     // Esses dois valores são tratados como iguais.\n\"0\" == 0              // A string é",
  "metadata": {
    "source": "/home/jonata/Documentos/typescript-langchain/tmp/JavaScript The Definitive Guide (David Flanagan).pdf",
    "chunkIndex": 284,
    "totalChunks": 10000
  }
}